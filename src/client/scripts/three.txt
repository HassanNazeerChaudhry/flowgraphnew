//sending compuation traingle counting
final InstallComputationMsg<NamesSet, HashSet<HashSet<String>>> compMsg1 = new InstallComputationMsg<>("TraingleCounting",
        () -> new TraingleCounting(),1);
graphActions.put("compute1",compMsg1);


//sending select operation
SelectMsg selectObject1=new SelectMsg(Modifier.VERTEX, "age", Operator.GREATER,"18", ConjugationType.NULL);
graphActions.put("select1",selectObject1);


//sending partitioning operation
PartitionMsg partitioningObject1=new PartitionMsg("country", Modifier.VERTEX);
 graphActions.put("partitioning1",partitioningObject1);


//sending extraction operation
ExtractMsg extractObject1=new ExtractMsg("country", Modifier.VERTEX);
  graphActions.put("extract1",extractObject1);

//Streaming operation
StreamOperatorMsg streamOperatorObject1=new StreamOperatorMsg(StreamOps.AVG, "age");
graphActions.put("streamOP1",streamOperatorObject1);


// evaluate operator operation
EvaluateMsg evaluateObject1=new EvaluateMsg(Operator.GREATEREQUAL,30);
graphActions.put("evaluate1",evaluateObject1);


// evaluate operator operation
FollowByMsg followedByObject1=new FollowByMsg(7);
graphActions.put("followedBy1",followedByObject1);


//sending compuation traingle counting
final InstallComputationMsg<Integer, Integer> compMsg2 = new InstallComputationMsg<>("MaxIncomingEdges",
        () -> new MaxIncomingEdges(),2);
graphActions.put("compute2",compMsg2);



//sending select operation
SelectMsg selectObject2=new SelectMsg(Modifier.VERTEX,"age", Operator.GREATER,"18", ConjugationType.NULL);
graphActions.put("select2",selectObject2);


//sending partitioning operation
PartitionMsg partitioningObject2=new PartitionMsg("country", Modifier.VERTEX);
graphActions.put("partitioning2",partitioningObject2);

//sending extraction operation
ExtractMsg extractObject2=new ExtractMsg("country", Modifier.VERTEX);
graphActions.put("extract2",extractObject2);


//Streaming operation
StreamOperatorMsg streamOperatorObject2=new StreamOperatorMsg(StreamOps.AVG, "age");
graphActions.put("streamOP2",streamOperatorObject2);


// evaluate operator operation
EvaluateMsg evaluateObject2=new EvaluateMsg(Operator.GREATEREQUAL,30);
graphActions.put("evaluate2",evaluateObject2);


FollowByMsg followedByObject2=new FollowByMsg(7);
graphActions.put("followedBy2",followedByObject2);


//sending compuation traingle counting
final InstallComputationMsg<Integer, Integer> compMsg3 = new InstallComputationMsg<>("MaxIncomingEdges",
        () -> new MaxIncomingEdges(),2);
graphActions.put("compute3",compMsg3);



//sending select operation
SelectMsg selectObject3=new SelectMsg(Modifier.VERTEX,"age", Operator.GREATER,"18", ConjugationType.NULL);
graphActions.put("select3",selectObject3);


//sending partitioning operation
PartitionMsg partitioningObject3=new PartitionMsg("country", Modifier.VERTEX);
graphActions.put("partitioning3",partitioningObject3);

//sending extraction operation
ExtractMsg extractObject3=new ExtractMsg("country", Modifier.VERTEX);
graphActions.put("extract3",extractObject3);


//Streaming operation
StreamOperatorMsg streamOperatorObject3=new StreamOperatorMsg(StreamOps.AVG, "age");
graphActions.put("streamOP3",streamOperatorObject3);


// evaluate operator operation
EvaluateMsg evaluateObject3=new EvaluateMsg(Operator.GREATEREQUAL,30);
graphActions.put("evaluate3",evaluateObject3);


FollowByMsg followedByObject3=new FollowByMsg(7);
graphActions.put("followedBy3",followedByObject3);
