// Generated from /Users/chaudhryhassan/Desktop/FlowGraph-main/src/shared/antlr4/pattern/Pattern.g4 by ANTLR 4.9.1
package shared.antlr4.pattern;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PatternLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.9.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		Operator=46, NOT=47, AND=48, OR=49, DOT=50, Litterals=51, Timeunit=52, 
		Number=53, Skip=54;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
			"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
			"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
			"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
			"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
			"T__41", "T__42", "T__43", "T__44", "Operator", "NOT", "AND", "OR", "DOT", 
			"Litterals", "Timeunit", "Number", "Skip"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "';'", "'.g()'", "'.collect('", "','", "')'", "'.compute('", "'.select('", 
			"'.SubGraphByV('", "'.SubGraphByE('", "'.extractV('", "'.extractE('", 
			"'.evaluate('", "', ['", "']'", "'='", "'.followedBy('", "'EDGE['", "'('", 
			"'.map'", "'.flatmap'", "'.reduce'", "'.filter'", "'.groupby'", "'.Merge'", 
			"'.collect'", "'.avg'", "'.max'", "'.min'", "'.count'", "'.select'", 
			"'.trigger('", "'edge'", "'vertex'", "'addition'", "'deletion'", "'update'", 
			"'as'", "'['", "'.emit('", "'ago'", "'every'", "'within'", "'''", "'$'", 
			"'\"'", null, "'not'", "'and'", "'or'", "'.'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, "Operator", 
			"NOT", "AND", "OR", "DOT", "Litterals", "Timeunit", "Number", "Skip"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public PatternLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Pattern.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\28\u01d2\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3"+
		"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r"+
		"\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3"+
		"\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3"+
		"\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3"+
		"\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3"+
		"\34\3\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3"+
		"!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3"+
		"$\3$\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3\'\3\'\3(\3("+
		"\3(\3(\3(\3(\3(\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3+\3,"+
		"\3,\3-\3-\3.\3.\3/\3/\3/\3/\3/\3/\3/\5/\u01a0\n/\3\60\3\60\3\60\3\60\3"+
		"\61\3\61\3\61\3\61\3\62\3\62\3\62\3\63\3\63\3\64\3\64\3\64\6\64\u01b2"+
		"\n\64\r\64\16\64\u01b3\3\65\6\65\u01b7\n\65\r\65\16\65\u01b8\3\65\3\65"+
		"\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u01c4\n\65\6\65\u01c6\n\65\r"+
		"\65\16\65\u01c7\3\66\3\66\3\67\6\67\u01cd\n\67\r\67\16\67\u01ce\3\67\3"+
		"\67\2\28\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17"+
		"\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\35"+
		"9\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66"+
		"k\67m8\3\2\6\4\2>>@@\4\2C\\c|\3\2\62;\5\2\13\f\17\17\"\"\2\u01dd\2\3\3"+
		"\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2"+
		"\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3"+
		"\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2"+
		"%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61"+
		"\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2"+
		"\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I"+
		"\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2"+
		"\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2"+
		"\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\3o"+
		"\3\2\2\2\5q\3\2\2\2\7v\3\2\2\2\t\u0080\3\2\2\2\13\u0082\3\2\2\2\r\u0084"+
		"\3\2\2\2\17\u008e\3\2\2\2\21\u0097\3\2\2\2\23\u00a5\3\2\2\2\25\u00b3\3"+
		"\2\2\2\27\u00be\3\2\2\2\31\u00c9\3\2\2\2\33\u00d4\3\2\2\2\35\u00d8\3\2"+
		"\2\2\37\u00da\3\2\2\2!\u00dc\3\2\2\2#\u00e9\3\2\2\2%\u00ef\3\2\2\2\'\u00f1"+
		"\3\2\2\2)\u00f6\3\2\2\2+\u00ff\3\2\2\2-\u0107\3\2\2\2/\u010f\3\2\2\2\61"+
		"\u0118\3\2\2\2\63\u011f\3\2\2\2\65\u0128\3\2\2\2\67\u012d\3\2\2\29\u0132"+
		"\3\2\2\2;\u0137\3\2\2\2=\u013e\3\2\2\2?\u0146\3\2\2\2A\u0150\3\2\2\2C"+
		"\u0155\3\2\2\2E\u015c\3\2\2\2G\u0165\3\2\2\2I\u016e\3\2\2\2K\u0175\3\2"+
		"\2\2M\u0178\3\2\2\2O\u017a\3\2\2\2Q\u0181\3\2\2\2S\u0185\3\2\2\2U\u018b"+
		"\3\2\2\2W\u0192\3\2\2\2Y\u0194\3\2\2\2[\u0196\3\2\2\2]\u019f\3\2\2\2_"+
		"\u01a1\3\2\2\2a\u01a5\3\2\2\2c\u01a9\3\2\2\2e\u01ac\3\2\2\2g\u01b1\3\2"+
		"\2\2i\u01c5\3\2\2\2k\u01c9\3\2\2\2m\u01cc\3\2\2\2op\7=\2\2p\4\3\2\2\2"+
		"qr\7\60\2\2rs\7i\2\2st\7*\2\2tu\7+\2\2u\6\3\2\2\2vw\7\60\2\2wx\7e\2\2"+
		"xy\7q\2\2yz\7n\2\2z{\7n\2\2{|\7g\2\2|}\7e\2\2}~\7v\2\2~\177\7*\2\2\177"+
		"\b\3\2\2\2\u0080\u0081\7.\2\2\u0081\n\3\2\2\2\u0082\u0083\7+\2\2\u0083"+
		"\f\3\2\2\2\u0084\u0085\7\60\2\2\u0085\u0086\7e\2\2\u0086\u0087\7q\2\2"+
		"\u0087\u0088\7o\2\2\u0088\u0089\7r\2\2\u0089\u008a\7w\2\2\u008a\u008b"+
		"\7v\2\2\u008b\u008c\7g\2\2\u008c\u008d\7*\2\2\u008d\16\3\2\2\2\u008e\u008f"+
		"\7\60\2\2\u008f\u0090\7u\2\2\u0090\u0091\7g\2\2\u0091\u0092\7n\2\2\u0092"+
		"\u0093\7g\2\2\u0093\u0094\7e\2\2\u0094\u0095\7v\2\2\u0095\u0096\7*\2\2"+
		"\u0096\20\3\2\2\2\u0097\u0098\7\60\2\2\u0098\u0099\7U\2\2\u0099\u009a"+
		"\7w\2\2\u009a\u009b\7d\2\2\u009b\u009c\7I\2\2\u009c\u009d\7t\2\2\u009d"+
		"\u009e\7c\2\2\u009e\u009f\7r\2\2\u009f\u00a0\7j\2\2\u00a0\u00a1\7D\2\2"+
		"\u00a1\u00a2\7{\2\2\u00a2\u00a3\7X\2\2\u00a3\u00a4\7*\2\2\u00a4\22\3\2"+
		"\2\2\u00a5\u00a6\7\60\2\2\u00a6\u00a7\7U\2\2\u00a7\u00a8\7w\2\2\u00a8"+
		"\u00a9\7d\2\2\u00a9\u00aa\7I\2\2\u00aa\u00ab\7t\2\2\u00ab\u00ac\7c\2\2"+
		"\u00ac\u00ad\7r\2\2\u00ad\u00ae\7j\2\2\u00ae\u00af\7D\2\2\u00af\u00b0"+
		"\7{\2\2\u00b0\u00b1\7G\2\2\u00b1\u00b2\7*\2\2\u00b2\24\3\2\2\2\u00b3\u00b4"+
		"\7\60\2\2\u00b4\u00b5\7g\2\2\u00b5\u00b6\7z\2\2\u00b6\u00b7\7v\2\2\u00b7"+
		"\u00b8\7t\2\2\u00b8\u00b9\7c\2\2\u00b9\u00ba\7e\2\2\u00ba\u00bb\7v\2\2"+
		"\u00bb\u00bc\7X\2\2\u00bc\u00bd\7*\2\2\u00bd\26\3\2\2\2\u00be\u00bf\7"+
		"\60\2\2\u00bf\u00c0\7g\2\2\u00c0\u00c1\7z\2\2\u00c1\u00c2\7v\2\2\u00c2"+
		"\u00c3\7t\2\2\u00c3\u00c4\7c\2\2\u00c4\u00c5\7e\2\2\u00c5\u00c6\7v\2\2"+
		"\u00c6\u00c7\7G\2\2\u00c7\u00c8\7*\2\2\u00c8\30\3\2\2\2\u00c9\u00ca\7"+
		"\60\2\2\u00ca\u00cb\7g\2\2\u00cb\u00cc\7x\2\2\u00cc\u00cd\7c\2\2\u00cd"+
		"\u00ce\7n\2\2\u00ce\u00cf\7w\2\2\u00cf\u00d0\7c\2\2\u00d0\u00d1\7v\2\2"+
		"\u00d1\u00d2\7g\2\2\u00d2\u00d3\7*\2\2\u00d3\32\3\2\2\2\u00d4\u00d5\7"+
		".\2\2\u00d5\u00d6\7\"\2\2\u00d6\u00d7\7]\2\2\u00d7\34\3\2\2\2\u00d8\u00d9"+
		"\7_\2\2\u00d9\36\3\2\2\2\u00da\u00db\7?\2\2\u00db \3\2\2\2\u00dc\u00dd"+
		"\7\60\2\2\u00dd\u00de\7h\2\2\u00de\u00df\7q\2\2\u00df\u00e0\7n\2\2\u00e0"+
		"\u00e1\7n\2\2\u00e1\u00e2\7q\2\2\u00e2\u00e3\7y\2\2\u00e3\u00e4\7g\2\2"+
		"\u00e4\u00e5\7f\2\2\u00e5\u00e6\7D\2\2\u00e6\u00e7\7{\2\2\u00e7\u00e8"+
		"\7*\2\2\u00e8\"\3\2\2\2\u00e9\u00ea\7G\2\2\u00ea\u00eb\7F\2\2\u00eb\u00ec"+
		"\7I\2\2\u00ec\u00ed\7G\2\2\u00ed\u00ee\7]\2\2\u00ee$\3\2\2\2\u00ef\u00f0"+
		"\7*\2\2\u00f0&\3\2\2\2\u00f1\u00f2\7\60\2\2\u00f2\u00f3\7o\2\2\u00f3\u00f4"+
		"\7c\2\2\u00f4\u00f5\7r\2\2\u00f5(\3\2\2\2\u00f6\u00f7\7\60\2\2\u00f7\u00f8"+
		"\7h\2\2\u00f8\u00f9\7n\2\2\u00f9\u00fa\7c\2\2\u00fa\u00fb\7v\2\2\u00fb"+
		"\u00fc\7o\2\2\u00fc\u00fd\7c\2\2\u00fd\u00fe\7r\2\2\u00fe*\3\2\2\2\u00ff"+
		"\u0100\7\60\2\2\u0100\u0101\7t\2\2\u0101\u0102\7g\2\2\u0102\u0103\7f\2"+
		"\2\u0103\u0104\7w\2\2\u0104\u0105\7e\2\2\u0105\u0106\7g\2\2\u0106,\3\2"+
		"\2\2\u0107\u0108\7\60\2\2\u0108\u0109\7h\2\2\u0109\u010a\7k\2\2\u010a"+
		"\u010b\7n\2\2\u010b\u010c\7v\2\2\u010c\u010d\7g\2\2\u010d\u010e\7t\2\2"+
		"\u010e.\3\2\2\2\u010f\u0110\7\60\2\2\u0110\u0111\7i\2\2\u0111\u0112\7"+
		"t\2\2\u0112\u0113\7q\2\2\u0113\u0114\7w\2\2\u0114\u0115\7r\2\2\u0115\u0116"+
		"\7d\2\2\u0116\u0117\7{\2\2\u0117\60\3\2\2\2\u0118\u0119\7\60\2\2\u0119"+
		"\u011a\7O\2\2\u011a\u011b\7g\2\2\u011b\u011c\7t\2\2\u011c\u011d\7i\2\2"+
		"\u011d\u011e\7g\2\2\u011e\62\3\2\2\2\u011f\u0120\7\60\2\2\u0120\u0121"+
		"\7e\2\2\u0121\u0122\7q\2\2\u0122\u0123\7n\2\2\u0123\u0124\7n\2\2\u0124"+
		"\u0125\7g\2\2\u0125\u0126\7e\2\2\u0126\u0127\7v\2\2\u0127\64\3\2\2\2\u0128"+
		"\u0129\7\60\2\2\u0129\u012a\7c\2\2\u012a\u012b\7x\2\2\u012b\u012c\7i\2"+
		"\2\u012c\66\3\2\2\2\u012d\u012e\7\60\2\2\u012e\u012f\7o\2\2\u012f\u0130"+
		"\7c\2\2\u0130\u0131\7z\2\2\u01318\3\2\2\2\u0132\u0133\7\60\2\2\u0133\u0134"+
		"\7o\2\2\u0134\u0135\7k\2\2\u0135\u0136\7p\2\2\u0136:\3\2\2\2\u0137\u0138"+
		"\7\60\2\2\u0138\u0139\7e\2\2\u0139\u013a\7q\2\2\u013a\u013b\7w\2\2\u013b"+
		"\u013c\7p\2\2\u013c\u013d\7v\2\2\u013d<\3\2\2\2\u013e\u013f\7\60\2\2\u013f"+
		"\u0140\7u\2\2\u0140\u0141\7g\2\2\u0141\u0142\7n\2\2\u0142\u0143\7g\2\2"+
		"\u0143\u0144\7e\2\2\u0144\u0145\7v\2\2\u0145>\3\2\2\2\u0146\u0147\7\60"+
		"\2\2\u0147\u0148\7v\2\2\u0148\u0149\7t\2\2\u0149\u014a\7k\2\2\u014a\u014b"+
		"\7i\2\2\u014b\u014c\7i\2\2\u014c\u014d\7g\2\2\u014d\u014e\7t\2\2\u014e"+
		"\u014f\7*\2\2\u014f@\3\2\2\2\u0150\u0151\7g\2\2\u0151\u0152\7f\2\2\u0152"+
		"\u0153\7i\2\2\u0153\u0154\7g\2\2\u0154B\3\2\2\2\u0155\u0156\7x\2\2\u0156"+
		"\u0157\7g\2\2\u0157\u0158\7t\2\2\u0158\u0159\7v\2\2\u0159\u015a\7g\2\2"+
		"\u015a\u015b\7z\2\2\u015bD\3\2\2\2\u015c\u015d\7c\2\2\u015d\u015e\7f\2"+
		"\2\u015e\u015f\7f\2\2\u015f\u0160\7k\2\2\u0160\u0161\7v\2\2\u0161\u0162"+
		"\7k\2\2\u0162\u0163\7q\2\2\u0163\u0164\7p\2\2\u0164F\3\2\2\2\u0165\u0166"+
		"\7f\2\2\u0166\u0167\7g\2\2\u0167\u0168\7n\2\2\u0168\u0169\7g\2\2\u0169"+
		"\u016a\7v\2\2\u016a\u016b\7k\2\2\u016b\u016c\7q\2\2\u016c\u016d\7p\2\2"+
		"\u016dH\3\2\2\2\u016e\u016f\7w\2\2\u016f\u0170\7r\2\2\u0170\u0171\7f\2"+
		"\2\u0171\u0172\7c\2\2\u0172\u0173\7v\2\2\u0173\u0174\7g\2\2\u0174J\3\2"+
		"\2\2\u0175\u0176\7c\2\2\u0176\u0177\7u\2\2\u0177L\3\2\2\2\u0178\u0179"+
		"\7]\2\2\u0179N\3\2\2\2\u017a\u017b\7\60\2\2\u017b\u017c\7g\2\2\u017c\u017d"+
		"\7o\2\2\u017d\u017e\7k\2\2\u017e\u017f\7v\2\2\u017f\u0180\7*\2\2\u0180"+
		"P\3\2\2\2\u0181\u0182\7c\2\2\u0182\u0183\7i\2\2\u0183\u0184\7q\2\2\u0184"+
		"R\3\2\2\2\u0185\u0186\7g\2\2\u0186\u0187\7x\2\2\u0187\u0188\7g\2\2\u0188"+
		"\u0189\7t\2\2\u0189\u018a\7{\2\2\u018aT\3\2\2\2\u018b\u018c\7y\2\2\u018c"+
		"\u018d\7k\2\2\u018d\u018e\7v\2\2\u018e\u018f\7j\2\2\u018f\u0190\7k\2\2"+
		"\u0190\u0191\7p\2\2\u0191V\3\2\2\2\u0192\u0193\7)\2\2\u0193X\3\2\2\2\u0194"+
		"\u0195\7&\2\2\u0195Z\3\2\2\2\u0196\u0197\7$\2\2\u0197\\\3\2\2\2\u0198"+
		"\u01a0\t\2\2\2\u0199\u019a\7?\2\2\u019a\u01a0\7?\2\2\u019b\u019c\7>\2"+
		"\2\u019c\u01a0\7?\2\2\u019d\u019e\7@\2\2\u019e\u01a0\7?\2\2\u019f\u0198"+
		"\3\2\2\2\u019f\u0199\3\2\2\2\u019f\u019b\3\2\2\2\u019f\u019d\3\2\2\2\u01a0"+
		"^\3\2\2\2\u01a1\u01a2\7p\2\2\u01a2\u01a3\7q\2\2\u01a3\u01a4\7v\2\2\u01a4"+
		"`\3\2\2\2\u01a5\u01a6\7c\2\2\u01a6\u01a7\7p\2\2\u01a7\u01a8\7f\2\2\u01a8"+
		"b\3\2\2\2\u01a9\u01aa\7q\2\2\u01aa\u01ab\7t\2\2\u01abd\3\2\2\2\u01ac\u01ad"+
		"\7\60\2\2\u01adf\3\2\2\2\u01ae\u01b2\t\3\2\2\u01af\u01b2\5k\66\2\u01b0"+
		"\u01b2\5e\63\2\u01b1\u01ae\3\2\2\2\u01b1\u01af\3\2\2\2\u01b1\u01b0\3\2"+
		"\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4"+
		"h\3\2\2\2\u01b5\u01b7\5k\66\2\u01b6\u01b5\3\2\2\2\u01b7\u01b8\3\2\2\2"+
		"\u01b8\u01b6\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01c3\3\2\2\2\u01ba\u01bb"+
		"\7/\2\2\u01bb\u01bc\7o\2\2\u01bc\u01c4\7u\2\2\u01bd\u01be\7/\2\2\u01be"+
		"\u01c4\7u\2\2\u01bf\u01c0\7/\2\2\u01c0\u01c4\7o\2\2\u01c1\u01c2\7/\2\2"+
		"\u01c2\u01c4\7j\2\2\u01c3\u01ba\3\2\2\2\u01c3\u01bd\3\2\2\2\u01c3\u01bf"+
		"\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c4\u01c6\3\2\2\2\u01c5\u01b6\3\2\2\2\u01c6"+
		"\u01c7\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8j\3\2\2\2"+
		"\u01c9\u01ca\t\4\2\2\u01cal\3\2\2\2\u01cb\u01cd\t\5\2\2\u01cc\u01cb\3"+
		"\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01cc\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf"+
		"\u01d0\3\2\2\2\u01d0\u01d1\b\67\2\2\u01d1n\3\2\2\2\n\2\u019f\u01b1\u01b3"+
		"\u01b8\u01c3\u01c7\u01ce\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}